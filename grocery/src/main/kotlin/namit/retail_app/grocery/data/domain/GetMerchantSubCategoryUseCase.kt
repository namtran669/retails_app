package namit.retail_app.grocery.data.domainimport android.util.Logimport namit.retail_app.core.data.entity.CategoryItemimport namit.retail_app.core.data.repository.CategoryMerchantRepositoryimport namit.retail_app.core.utils.UseCaseResultinterface GetMerchantSubCategoryUseCase {    suspend fun execute(merchantId: String, parentId: Int): UseCaseResult<List<CategoryItem>>}class GetMerchantSubCategoryUseCaseImpl(private val repository: CategoryMerchantRepository) :    GetMerchantSubCategoryUseCase {    companion object {        val TAG = GetMerchantSubCategoryUseCaseImpl::class.java.simpleName        const val ERROR_EMPTY_SUB_CATEGORY_CASE = "ERROR_EMPTY_SUB_CATEGORY_CASE"    }    override suspend fun execute(        merchantId: String,        parentId: Int    ): UseCaseResult<List<CategoryItem>> {        return try {            val categories =                repository.getSubCategoryList(merchantId = merchantId, parentId = parentId)            if (categories.isNotEmpty()) {                UseCaseResult.Success(categories)            } else {                UseCaseResult.Error(Throwable(ERROR_EMPTY_SUB_CATEGORY_CASE))            }        } catch (e: Exception) {            Log.e(TAG, e.message, e)            UseCaseResult.Error(e)        }    }}