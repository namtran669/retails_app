package namit.retail_app.core.domainimport namit.retail_app.core.data.entity.ProductItemimport namit.retail_app.core.data.repository.ProductRepositoryimport namit.retail_app.core.utils.UseCaseResultinterface GetRelatedProductByCategoryUseCase {    suspend fun execute(product: ProductItem, page: Int): UseCaseResult<List<ProductItem>>}class GetRelatedProductByCategoryUseCaseImpl(private val repository: ProductRepository) :    GetRelatedProductByCategoryUseCase {    companion object {        const val ERROR_EMPTY_PRODUCT_DATA = "ERROR_EMPTY_PRODUCT_DATA"    }    override suspend fun execute(        product: ProductItem,        page: Int    ): UseCaseResult<List<ProductItem>> {        return try {            val relatedProductList = repository.getRelatedProduct(                merchantId = product.merchantId,                categoryIds = product.categoryIds,                productId = product.id,                page = page            )            if (relatedProductList.isNotEmpty()) {                UseCaseResult.Success(relatedProductList)            } else {                UseCaseResult.Error(Throwable(ERROR_EMPTY_PRODUCT_DATA))            }        } catch (e: Exception) {            UseCaseResult.Error(e)        }    }}