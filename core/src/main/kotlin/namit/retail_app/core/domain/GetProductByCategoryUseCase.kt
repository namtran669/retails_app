package namit.retail_app.core.domainimport android.util.Logimport namit.retail_app.core.data.entity.ProductItemimport namit.retail_app.core.data.repository.ProductRepositoryimport namit.retail_app.core.utils.UseCaseResultinterface GetProductByCategoryUseCase {    suspend fun execute(        merchantId: String,        categoryIds: List<Int>,        page: Int    ): UseCaseResult<List<ProductItem>>}class GetProductByCategoryUseCaseImpl(private val repository: ProductRepository) :    GetProductByCategoryUseCase {    companion object {        val TAG = GetProductByCategoryUseCaseImpl::class.java.simpleName        const val ERROR_EMPTY_PRODUCT_CASE = "ERROR_EMPTY_PRODUCT_CASE"    }    override suspend fun execute(        merchantId: String,        categoryIds: List<Int>,        page: Int    ): UseCaseResult<List<ProductItem>> {        return try {            val productList = repository.getProductByCategory(                merchantId = merchantId,                categoryIds = categoryIds,                page = page            )            if (productList.isNotEmpty()) {                UseCaseResult.Success(productList)            } else {                UseCaseResult.Error(Throwable(ERROR_EMPTY_PRODUCT_CASE))            }        } catch (e: Exception) {            Log.e(TAG, e.message, e)            UseCaseResult.Error(e)        }    }}