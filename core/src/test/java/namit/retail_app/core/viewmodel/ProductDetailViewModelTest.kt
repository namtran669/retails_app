package namit.retail_app.core.viewmodelimport namit.retail_app.core.data.entity.MerchantInfoItemimport namit.retail_app.core.data.entity.ProductItemimport namit.retail_app.core.domain.GetRelatedProductByCategoryUseCaseimport namit.retail_app.core.presentation.product_detail.ProductDetailViewModelimport namit.retail_app.core.tracking.EventTrackingManagerimport namit.retail_app.core.utils.UseCaseResultimport namit.retail_app.testutils.BaseViewModelTestimport namit.retail_app.testutils.TestObserverimport namit.retail_app.testutils.testObserverimport com.nhaarman.mockitokotlin2.mockimport com.nhaarman.mockitokotlin2.wheneverimport kotlinx.coroutines.ExperimentalCoroutinesApiimport kotlinx.coroutines.runBlockingimport org.junit.Beforeimport org.junit.Test@ExperimentalCoroutinesApiclass ProductDetailViewModelTest : BaseViewModelTest() {    private lateinit var productDataObserver: TestObserver<ProductItem>    private lateinit var relatedProductObserver: TestObserver<List<ProductItem>>    private val getRelatedProductByCategoryUseCase: GetRelatedProductByCategoryUseCase = mock()    private val eventTrackingManager: EventTrackingManager = mock()    private lateinit var viewModel: ProductDetailViewModel    @Before    override fun setup() {        super.setup()        val initProduct = ProductItem(            id = 1,            nameEn = "Banana",            nameTh = "กล้วย",            retailPriceWithTax = 20.2,            weightUnit = "g",            country = "Thailand",            distributor = "Wefresh Mart",            updatedAt = "2020-01-10T08:21:43",            weight = 5.0F,            thumbnailUrl = "https://trello-attachments.s3.amazonaws.com/5dfc31a04c12a47b5221c332/5e1704ec4bd0b6270c2d0602/c341443e2f594c17812f73fb555cdcd8/img_banana%403x.png",            merchantId = "1",            categoryIds = listOf(1, 2, 3)        )        viewModel =            ProductDetailViewModel(getRelatedProductByCategoryUseCase = getRelatedProductByCategoryUseCase,                productData =  initProduct,                merchantData = MerchantInfoItem(),                eventTrackingManager = eventTrackingManager            )        productDataObserver = viewModel.productDataLiveData.testObserver()        relatedProductObserver = viewModel.relatedProduct.testObserver()    }    //todo this not done    @Test    fun getRelatedProductSuccess() = runBlocking {        val dummyRelatedProduct = mutableListOf<ProductItem>()        val product1 = ProductItem(            id = 1,            nameEn = "Banana",            nameTh = "กล้วย",            retailPriceWithTax = 20.2,            weightUnit = "g",            country = "Thailand",            distributor = "Wefresh Mart",            updatedAt = "2020-01-10T08:21:43",            weight = 5.0F,            thumbnailUrl = "https://trello-attachments.s3.amazonaws.com/5dfc31a04c12a47b5221c332/5e1704ec4bd0b6270c2d0602/c341443e2f594c17812f73fb555cdcd8/img_banana%403x.png",            merchantId = "1",            categoryIds = listOf(1, 2, 3)        )        val product2 = ProductItem(            id = 2,            nameEn = "Apple",            nameTh = "แอปเปิ้ล",            retailPriceWithTax = 40.5,            weightUnit = "kg",            country = "USA",            distributor = "Wefresh Mart",            updatedAt = "2019-01-12T08:21:43",            weight = 5.0F,            thumbnailUrl = "https://www.kiku-apple.com/wp-content/uploads/2014/06/kikuapplestrans.png",            merchantId = "2",            categoryIds = listOf(1, 2, 3)        )        dummyRelatedProduct.apply {            add(product1)            add(product2)        }        whenever(            getRelatedProductByCategoryUseCase.execute(                product1,                0            )        ).thenReturn(UseCaseResult.Success(dummyRelatedProduct))        viewModel.getRelatedProductList()    }}