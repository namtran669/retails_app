package namit.retail_app.maps.domainimport android.util.Logimport namit.retail_app.core.data.entity.AddressSearchModelimport namit.retail_app.core.utils.UseCaseResultimport namit.retail_app.maps.data.repository.SearchAddressRepositoryimport com.google.gson.JsonObjectinterface SearchAddressUseCase {    suspend fun execute(query: String): UseCaseResult<List<AddressSearchModel>>}class SearchAddressUseCaseImpl(private val searchRepository: SearchAddressRepository) :    SearchAddressUseCase {    companion object {        private val TAG = SearchAddressUseCaseImpl::class.java.simpleName        private const val ERROR_NO_ADDRESS_SEARCH = "ERROR_NO_ADDRESS_SEARCH"    }    override suspend fun execute(query: String): UseCaseResult<List<AddressSearchModel>> {        return try {            val locationArr = searchRepository.search(query)            if (locationArr.locationList.isJsonArray) {                val data = mutableListOf<AddressSearchModel>()                for (locationJson in locationArr.locationList) {                    if (locationJson != null && locationJson.isJsonObject && !locationJson.isJsonNull) {                        val location = AddressSearchModel()                        location.placeID = (locationJson as JsonObject).get("place_id").asString                        val locationDetail = locationJson.get("structured_formatting").asJsonObject                        if (!locationDetail.isJsonNull && locationDetail.isJsonObject ) {                            location.addressName = locationDetail.get("main_text")?.asString                            location.addressDetail = locationDetail.get("secondary_text")?.asString                        }                        data.add(location)                    }                }                UseCaseResult.Success(data)            } else {                UseCaseResult.Error(Throwable(ERROR_NO_ADDRESS_SEARCH))            }        } catch (e: Exception) {            Log.e(TAG, "Exception", e)            UseCaseResult.Error(e)        }    }}